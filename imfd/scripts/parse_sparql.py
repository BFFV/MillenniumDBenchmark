import os
import sys
from shutil import rmtree


# Parse path inside query
def parse_path(p):
    components = p.strip().split(' ')
    """
    kleene = components[1].find('{')
    if kleene >= 0:
        print(components[1])  # Kleene clause found
    """
    # Kleene clause is changed from {,3} to + instead of * (avoid 0-repetition)
    property_path = components[1].replace('{,3}', '+')
    parsed_path = f'({components[0]})=[{property_path}]=>({components[2]}),\n'
    return parsed_path


# SPARQL to MillenniumDB query syntax
def parse_query(in_query, out_query):
    mdb_query = 'MATCH '
    with open(in_query, 'r') as in_file:
        query = in_file.readline().strip('\n')
        start_idx = query.find('ASK')
        if start_idx >= 0:  # Boolean query
            path_idx = start_idx
            return_syntax = 'RETURN *\nLIMIT 1'
        else:  # Enumeration query
            start_idx = query.find('SELECT')
            path_idx = query.find('WHERE')
            nodes = ', '.join(query[start_idx: path_idx].split(' ')[2: -1])
            return_syntax = f'RETURN DISTINCT {nodes}\nLIMIT 1000'
        query = query[path_idx:]
        query = query[query.find('?'): query.rfind('.')]
        query_paths = query.split('.')
        for idx, path in enumerate(query_paths):
            if idx:
                mdb_query += 6 * ' '
            mdb_query += parse_path(path)
        mdb_query = mdb_query.strip('\n')[:-1] + '\n'
        mdb_query += return_syntax
    with open(out_query, 'w') as out_file:
        out_file.write(mdb_query)


# Parse SPARQL queries generated by gMark
if __name__ == '__main__':
    try:
        in_dir = sys.argv[1]
        out_dir = sys.argv[2]
        rmtree(out_dir, ignore_errors=True)
        os.mkdir(out_dir)
        for subdir, dirs, files in os.walk(in_dir):
            for file in files:
                if file.endswith('.sparql'):
                    parse_query(os.path.join(subdir, file),
                                os.path.join(out_dir, f'{file[:-7]}'))
    except IndexError:
        print('Args are missing!')
