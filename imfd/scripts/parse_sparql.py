import os
import sys
from shutil import rmtree


# Parse path inside query
def parse_path(p):
    components = p.strip().split(' ')
    # Kleene clause is changed from {,3} to + instead of * (avoid 0-repetition)
    property_path = components[1].replace('{,3}', '+')
    parsed_path = f'({components[0]})=[{property_path}]=>({components[2]})\n'
    return parsed_path


# SPARQL to MillenniumDB query syntax
def parse_query(in_query, out_query):
    with open(in_query, 'r') as in_file:
        query = in_file.readline().strip('\n')
        start_idx = query.find('ASK')
        boolean = False
        if start_idx >= 0:  # Boolean query
            path_idx = start_idx
            boolean = True
        else:  # Enumeration query
            path_idx = query.find('WHERE')
        query = query[path_idx:]
        query = query[query.find('?'): query.rfind('.')]
        query_paths = query.split('.')
        for idx, path in enumerate(query_paths):
            if boolean:
                return_syntax = 'RETURN *\nLIMIT 1'
            else:
                path_components = path.strip().split(' ')
                return_syntax = f'RETURN DISTINCT {path_components[0]}, ' \
                                f'{path_components[2]}\nLIMIT 1000'
            mdb_query = 'MATCH ' + parse_path(path) + return_syntax
            with open(f'{out_query}_{idx}', 'w') as out_file:
                out_file.write(mdb_query)


# Parse SPARQL queries generated by gMark
if __name__ == '__main__':
    try:
        in_dir = sys.argv[1]
        out_dir = sys.argv[2]
        rmtree(out_dir, ignore_errors=True)
        os.mkdir(out_dir)
        for subdir, dirs, files in os.walk(in_dir):
            for file in files:
                if file.endswith('.sparql'):
                    parse_query(os.path.join(subdir, file),
                                os.path.join(out_dir, f'{file[:-7]}'))
    except IndexError:
        print('Args are missing!')
